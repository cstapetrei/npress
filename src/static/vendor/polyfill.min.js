// Native JavaScript for Bootstrap Polyfill
!function () { function l(t) { return "function" == typeof t || "[object Function]" === e.call(t) } function m(t) { var e, n = (e = Number(t), isNaN(e) ? 0 : 0 !== e && isFinite(e) ? (0 < e ? 1 : -1) * Math.floor(Math.abs(e)) : e); return Math.min(Math.max(n, 0), o) } var e, o; Element.prototype.matches || (Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector), Element.prototype.closest || (Element.prototype.closest = function (t) { var e = this; do { if (e.matches(t)) return e; e = e.parentElement || e.parentNode } while (null !== e && 1 === e.nodeType); return null }), window.Event && Window.prototype.Event || (window.Event = Window.prototype.Event = Document.prototype.Event = Element.prototype.Event = function (t, e) { if (!t) throw new Error("Not enough arguments"); var n, o = !(!e || void 0 === e.bubbles) && e.bubbles, r = !(!e || void 0 === e.cancelable) && e.cancelable; return "createEvent" in document ? (n = document.createEvent("Event")).initEvent(t, o, r) : ((n = document.createEventObject()).etype = t, n.bubbles = o, n.cancelable = r), n }), window.CustomEvent && Window.prototype.CustomEvent || (window.CustomEvent = Window.prototype.CustomEvent = Document.prototype.CustomEvent = Element.prototype.CustomEvent = function (t, e) { if (!t) throw Error("CustomEvent TypeError: An event name must be provided."); var n = new Event(t, e); return n.detail = e && e.detail || null, n }), Array.from || (Array.from = (e = Object.prototype.toString, o = Math.pow(2, 53) - 1, function (t, e, n) { var o = Object(t); if (null == t) throw new TypeError("Array.from requires an array-like object - not null or undefined"); var r, i = 1 < arguments.length ? e : void 0; if (void 0 !== i) { if (!l(i)) throw new TypeError("Array.from: when provided, the second argument must be a function"); 2 < arguments.length && (r = n) } for (var a, u = m(o.length), p = l(this) ? Object(new this(u)) : new Array(u), c = 0; c < u;)a = o[c], p[c] = i ? void 0 === r ? i(a, c) : i.call(r, a, c) : a, c += 1; return p.length = u, p })), Node.prototype.contains || (Node.prototype.contains = function (t) { for (; t = t.parentNode;)if (t === this) return !0; return !1 }) }();